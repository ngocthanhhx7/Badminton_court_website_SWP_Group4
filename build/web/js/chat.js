// Chat functionality
function showChatbox() {
    const chatbox = document.getElementById('chatbox-container');
    if (chatbox.style.display === 'none' || chatbox.style.display === '') {
        chatbox.style.display = 'block';
    } else {
        chatbox.style.display = 'none';
    }
}

function sendMessage() {
    const messageInput = document.getElementById('message-input');
    const message = messageInput.value.trim();
    
    if (message === '') {
        return;
    }
    
    // Add user message to chat
    addMessageToChat('user', message);
    messageInput.value = '';
    
    // Show loading indicator
    addMessageToChat('assistant', 'ƒêang x·ª≠ l√Ω...', true);
    
    // Send message to server
    fetch('ChatGPTServlet', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: 'message=' + encodeURIComponent(message)
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
    })
    .then(data => {
        // Remove loading message
        removeLoadingMessage();
        
        if (data.error) {
            // Handle different error types
            let errorMessage = 'L·ªói: ' + data.error;
            
            if (data.error_type === 'quota_exceeded') {
                errorMessage = '‚ö†Ô∏è H·∫°n m·ª©c API ƒë√£ h·∫øt. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá h·ªó tr·ª£.';
                if (data.suggestion) {
                    errorMessage += '\n\nüí° G·ª£i √Ω: ' + data.suggestion;
                }
            } else if (data.error_type === 'unauthorized') {
                errorMessage = 'üîê L·ªói x√°c th·ª±c API. Vui l√≤ng li√™n h·ªá h·ªó tr·ª£.';
                if (data.suggestion) {
                    errorMessage += '\n\nüí° G·ª£i √Ω: ' + data.suggestion;
                }
            } else if (data.error_type === 'bad_request') {
                errorMessage = '‚ùå Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i tin nh·∫Øn.';
                if (data.suggestion) {
                    errorMessage += '\n\nüí° G·ª£i √Ω: ' + data.suggestion;
                }
            } else if (data.error_type === 'server_error') {
                errorMessage = 'üîß L·ªói m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i sau.';
                if (data.suggestion) {
                    errorMessage += '\n\nüí° G·ª£i √Ω: ' + data.suggestion;
                }
            } else if (data.error_type === 'configuration_error') {
                errorMessage = '‚öôÔ∏è L·ªói c·∫•u h√¨nh h·ªá th·ªëng. Vui l√≤ng li√™n h·ªá h·ªó tr·ª£.';
                if (data.suggestion) {
                    errorMessage += '\n\nüí° G·ª£i √Ω: ' + data.suggestion;
                }
            } else if (data.error_type === 'validation_error') {
                errorMessage = 'üìù ' + data.error;
                if (data.suggestion) {
                    errorMessage += '\n\nüí° G·ª£i √Ω: ' + data.suggestion;
                }
            } else if (data.error_type === 'internal_error') {
                errorMessage = 'üí• L·ªói h·ªá th·ªëng. Vui l√≤ng th·ª≠ l·∫°i sau.';
                if (data.suggestion) {
                    errorMessage += '\n\nüí° G·ª£i √Ω: ' + data.suggestion;
                }
            }
            
            addMessageToChat('assistant', errorMessage);
        } else if (data.choices && data.choices.length > 0) {
            const assistantMessage = data.choices[0].message.content;
            addMessageToChat('assistant', assistantMessage);
        } else {
            addMessageToChat('assistant', 'Kh√¥ng th·ªÉ x·ª≠ l√Ω tin nh·∫Øn. Vui l√≤ng th·ª≠ l·∫°i.');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        removeLoadingMessage();
        
        let errorMessage = 'L·ªói k·∫øt n·ªëi. Vui l√≤ng th·ª≠ l·∫°i.';
        
        if (error.message.includes('HTTP error! status: 503')) {
            errorMessage = 'üîß D·ªãch v·ª• t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng th·ª≠ l·∫°i sau.';
        } else if (error.message.includes('HTTP error! status: 500')) {
            errorMessage = 'üí• L·ªói m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá h·ªó tr·ª£.';
        } else if (error.message.includes('HTTP error! status: 400')) {
            errorMessage = 'üìù Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i tin nh·∫Øn.';
        }
        
        addMessageToChat('assistant', errorMessage);
    });
}

function addMessageToChat(role, message, isLoading = false) {
    const chatMessages = document.getElementById('chat-messages');
    const messageDiv = document.createElement('div');
    messageDiv.className = 'message ' + role + '-message';
    
    if (isLoading) {
        messageDiv.id = 'loading-message';
        messageDiv.innerHTML = '<div class="loading-dots"><span></span><span></span><span></span></div>';
    } else {
        // Handle multiline messages (especially for error messages with suggestions)
        if (message.includes('\n')) {
            messageDiv.innerHTML = message.replace(/\n/g, '<br>');
        } else {
            messageDiv.textContent = message;
        }
    }
    
    chatMessages.appendChild(messageDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

function removeLoadingMessage() {
    const loadingMessage = document.getElementById('loading-message');
    if (loadingMessage) {
        loadingMessage.remove();
    }
}

// Handle Enter key press
document.addEventListener('DOMContentLoaded', function() {
    const messageInput = document.getElementById('message-input');
    if (messageInput) {
        messageInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });
    }
}); 